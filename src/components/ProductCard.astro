---
import Product_FallbackImage from './Product-FallbackImage.astro';

export interface Product {
  id: string;
  name: string;
  slug: string;
  price: number;
  salePrice?: number;
  image: string;
  category: string;
  isNew?: boolean;
  isBestseller?: boolean;
}

interface Props {
  product: Product;
}

const { product } = Astro.props;
const onSale = product.salePrice && product.salePrice < product.price;

// Use the image URL directly from the product object
// This will now be a fully formed URL from the productUtils.js formatter
const imageUrl = product.image;
---

<div class="group relative bg-white rounded-lg shadow-sm overflow-hidden hover:shadow-md transition">
  <div class="absolute top-2 right-2 z-10">
    {onSale && (
      <div class="bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full mb-2">
        {Math.round(((product.price - product.salePrice) / product.price) * 100)}% OFF
      </div>
    )}
    
    {product.isNew && (
      <div class="bg-secondary-500 text-white text-xs font-bold px-2 py-1 rounded-full mb-2">NEW</div>
    )}
    
    {product.isBestseller && (
      <div class="bg-primary-500 text-white text-xs font-bold px-2 py-1 rounded-full">BEST</div>
    )}
  </div>
  
  <a href={`/products/${product.slug}`} class="block">
    <div class="relative aspect-square flex items-center justify-center overflow-hidden bg-white p-4">
      {imageUrl ? (
        <img 
          src={imageUrl}
          alt={product.name} 
          class="product-image max-h-full max-w-full object-contain rounded-lg transition-transform duration-300 group-hover:scale-105"
          onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
        />
        <div class="hidden w-full h-full rounded-lg">
          <Product_FallbackImage productName={product.name} size="medium" />
        </div>
      ) : (
        <div class="w-full h-full flex items-center justify-center rounded-lg">
          <Product_FallbackImage productName={product.name} size="medium" />
        </div>
      )}
    </div>
  </a>
  
  <div class="p-4">
    <a href={`/products/${product.slug}`} class="block">
      <h3 class="text-lg font-semibold text-gray-800 hover:text-primary-600 transition line-clamp-2 min-h-[3.5rem]">{product.name}</h3>
    </a>
    
    <div class="text-sm text-gray-500 mb-4">{product.category}</div>
    
    <div class="flex justify-between items-center">
      <div>
        {onSale ? (
          <div class="flex items-center">
            <span class="text-lg font-bold text-primary-600">${product.salePrice.toFixed(2)}</span>
            <span class="text-sm text-gray-500 line-through ml-2">${product.price.toFixed(2)}</span>
          </div>
        ) : (
          <span class="text-lg font-bold text-primary-600">${product.price.toFixed(2)}</span>
        )}
      </div>
      
      <button 
        class="add-to-cart bg-primary-600 hover:bg-primary-700 text-white p-2 rounded-full transition flex items-center justify-center"
        data-product-id={product.id}
        data-product-name={product.name}
        data-product-slug={product.slug}
        data-product-price={onSale ? product.salePrice : product.price}
        aria-label="Add to cart"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  // Add to cart functionality with improved error handling
  document.addEventListener('DOMContentLoaded', () => {
    const addToCartButtons = document.querySelectorAll('.add-to-cart');
    
    addToCartButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        
        try {
          // Get product data from data attributes for resilience
          const productId = button.getAttribute('data-product-id');
          const productName = button.getAttribute('data-product-name');
          const productSlug = button.getAttribute('data-product-slug');
          const productPrice = parseFloat(button.getAttribute('data-product-price'));
          
          if (!productId) {
            console.error('Product ID is missing');
            return;
          }
          
          // Get current cart from localStorage
          let cart = [];
          try {
            cart = JSON.parse(localStorage.getItem('cart') || '[]');
            if (!Array.isArray(cart)) cart = [];
          } catch (error) {
            console.error('Error parsing cart:', error);
            cart = [];
          }
          
          // Check if item is already in cart
          const existingItemIndex = cart.findIndex(item => item.id === productId);
          
          if (existingItemIndex >= 0) {
            // Item exists, increment quantity
            cart[existingItemIndex].quantity = (cart[existingItemIndex].quantity || 1) + 1;
          } else {
            // Item doesn't exist, add new item with more complete data
            cart.push({
              id: productId,
              name: productName || 'Product',
              slug: productSlug || 'product',
              price: !isNaN(productPrice) ? productPrice : 0,
              quantity: 1,
              added: new Date().toISOString()
            });
          }
          
          // Save updated cart
          localStorage.setItem('cart', JSON.stringify(cart));
          
          // Update cart count in UI
          const cartCountElement = document.getElementById('cart-count');
          if (cartCountElement) {
            cartCountElement.textContent = cart.length.toString();
          }
          
          // Trigger storage event for other tabs
          window.dispatchEvent(new StorageEvent('storage', {
            key: 'cart'
          }));
          
          // Also dispatch a custom event for components that might be listening
          window.dispatchEvent(new CustomEvent('cartUpdated'));
          
          // Visual feedback
          const btn = button as HTMLButtonElement;
          const originalHTML = btn.innerHTML;
          btn.innerHTML = `
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
            </svg>
          `;
          btn.classList.remove('bg-primary-600', 'hover:bg-primary-700');
          btn.classList.add('bg-green-600');
          
          setTimeout(() => {
            btn.innerHTML = originalHTML;
            btn.classList.remove('bg-green-600');
            btn.classList.add('bg-primary-600', 'hover:bg-primary-700');
          }, 1500);
        } catch (error) {
          console.error('Error adding product to cart:', error);
        }
      });
    });
  });
</script>

<style>
  /* Ensure the fallback renders properly when image fails to load */
  .product-image-error {
    display: none;
  }
</style>