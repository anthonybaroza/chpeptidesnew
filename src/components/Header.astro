---
import CartIcon from './icons/CartIcon.astro';
import Logo from './Logo.astro';
---

<div class="h-24"><!-- Spacer to prevent content jump when header becomes fixed --></div>

<header id="main-header" class="fixed top-4 left-0 right-0 z-50 px-4 transition-all duration-300">
  <div id="nav-container" class="max-w-7xl mx-auto backdrop-blur-md bg-white/80 rounded-full shadow-lg border border-gray-100/30 flex items-center justify-between py-3 px-6 transition-all duration-300">
    <a href="/" class="text-xl font-bold text-primary-800 flex-shrink-0">
      <Logo />
    </a>
    
    <nav class="hidden md:flex space-x-8 mx-4">
      <a href="/" class="text-gray-700 hover:text-primary-600 hover:scale-105 transition-all duration-300 relative group font-medium">
        Home
        <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-primary-500 transition-all duration-300 group-hover:w-full"></span>
      </a>
      <a href="/products" class="text-gray-700 hover:text-primary-600 hover:scale-105 transition-all duration-300 relative group font-medium">
        Products
        <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-primary-500 transition-all duration-300 group-hover:w-full"></span>
      </a>
      <a href="/research" class="text-gray-700 hover:text-primary-600 hover:scale-105 transition-all duration-300 relative group font-medium">
        Research
        <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-primary-500 transition-all duration-300 group-hover:w-full"></span>
      </a>
      <a href="/contact" class="text-gray-700 hover:text-primary-600 hover:scale-105 transition-all duration-300 relative group font-medium">
        Contact
        <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-primary-500 transition-all duration-300 group-hover:w-full"></span>
      </a>
    </nav>
    
    <div class="flex items-center space-x-4">
      <button id="search-toggle" class="text-gray-700 hover:text-primary-600 relative group">
        <div class="bg-white/50 p-2 rounded-full transition-all duration-300 group-hover:bg-white/80 group-hover:shadow-md">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
      </button>
      
      <a href="/cart" class="text-gray-700 hover:text-primary-600 relative group">
        <div class="bg-white/50 p-2 rounded-full transition-all duration-300 group-hover:bg-white/80 group-hover:shadow-md">
          <CartIcon />
          <span id="cart-count" class="absolute -top-2 -right-2 bg-primary-600 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center transition-transform duration-300 group-hover:scale-110">0</span>
        </div>
      </a>
      
      <button id="mobile-menu-toggle" class="md:hidden text-gray-700 bg-white/50 p-2 rounded-full hover:bg-white/80 hover:shadow-md transition-all duration-300">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>
  </div>
  
  <!-- Mobile Menu (Floating) -->
  <div id="mobile-menu" class="md:hidden hidden mt-2 mx-auto backdrop-blur-md bg-white/90 rounded-2xl shadow-lg border border-gray-100/30 overflow-hidden">
    <nav class="flex flex-col py-4 px-6">
      <a href="/" class="text-gray-700 hover:text-primary-600 hover:pl-2 transition-all duration-300 py-3 border-b border-gray-100/50 font-medium">Home</a>
      <a href="/products" class="text-gray-700 hover:text-primary-600 hover:pl-2 transition-all duration-300 py-3 border-b border-gray-100/50 font-medium">Products</a>
      <a href="/research" class="text-gray-700 hover:text-primary-600 hover:pl-2 transition-all duration-300 py-3 border-b border-gray-100/50 font-medium">Research</a>
      <a href="/contact" class="text-gray-700 hover:text-primary-600 hover:pl-2 transition-all duration-300 py-3 font-medium">Contact</a>
      <div class="mt-3 pt-3 border-t border-gray-100/50">
        <button id="mobile-search-button" class="w-full text-left text-gray-700 hover:text-primary-600 hover:pl-2 transition-all duration-300 py-3 font-medium flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
          Search
        </button>
      </div>
    </nav>
  </div>
  
  <!-- Collapsed Side Nav (appears when scrolling) -->
  <div id="collapsed-nav" class="fixed right-4 top-4 rounded-full shadow-lg border border-gray-100/30 backdrop-blur-md bg-white/80 transition-all duration-300 scale-0 opacity-0 origin-right cursor-pointer">
    <button id="expand-nav" class="p-3 flex items-center justify-center text-primary-600 hover:text-primary-800">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
      </svg>
    </button>
  </div>
  
  <!-- Search Overlay -->
  <div id="search-overlay" class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-start justify-center pt-20 px-4 opacity-0 pointer-events-none transition-opacity duration-300">
    <div class="bg-white rounded-xl shadow-xl w-full max-w-3xl p-6 transform -translate-y-10 transition-transform duration-300" id="search-container">
      <div class="flex justify-between items-center mb-6">
        <h3 class="text-xl font-bold text-gray-800">Search Products</h3>
        <button id="close-search" class="text-gray-500 hover:text-gray-700 p-1">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      
      <div class="relative">
        <input 
          type="text" 
          id="search-input" 
          placeholder="Search for products..." 
          class="w-full border border-gray-300 rounded-lg px-4 py-3 pl-12 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
        />
        <div class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
      </div>
      
      <div id="search-results" class="mt-6 max-h-[60vh] overflow-y-auto">
        <!-- Results will be populated here -->
        <div class="text-gray-500 text-center py-8">
          Enter a search term to find products
        </div>
      </div>
    </div>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Elements
    const header = document.getElementById('main-header');
    const navContainer = document.getElementById('nav-container');
    const collapsedNav = document.getElementById('collapsed-nav');
    const expandNav = document.getElementById('expand-nav');
    const mobileMenuToggle = document.getElementById('mobile-menu-toggle');
    const mobileMenu = document.getElementById('mobile-menu');
    const searchToggle = document.getElementById('search-toggle');
    const mobileSearchButton = document.getElementById('mobile-search-button');
    const searchOverlay = document.getElementById('search-overlay');
    const searchContainer = document.getElementById('search-container');
    const closeSearch = document.getElementById('close-search');
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');

    // Variables to track state
    let lastScrollY = window.scrollY;
    let isNavCollapsed = false;
    let isNavExpanded = false;
    
    // Function to collapse the navbar
    function collapseNav() {
      if (!isNavCollapsed && window.scrollY > 100) {
        // Hide the main nav
        if (navContainer) {
          navContainer.classList.add('transform', 'translate-x-full', 'opacity-0');
          setTimeout(() => {
            if (header) header.classList.add('w-auto', 'right-4');
          }, 300);
        }
        
        // Show the collapsed button
        if (collapsedNav) {
          setTimeout(() => {
            collapsedNav.classList.remove('scale-0', 'opacity-0');
            collapsedNav.classList.add('scale-100', 'opacity-100');
          }, 300);
        }
        
        isNavCollapsed = true;
      }
    }
    
    // Function to expand the navbar - renamed to avoid name conflict
    function expandNavbar() {
      if (isNavCollapsed) {
        // Hide the collapsed button
        if (collapsedNav) {
          collapsedNav.classList.remove('scale-100', 'opacity-100');
          collapsedNav.classList.add('scale-0', 'opacity-0');
        }
        
        // Show the main nav
        if (header) header.classList.remove('w-auto', 'right-4');
        if (navContainer) {
          setTimeout(() => {
            navContainer.classList.remove('transform', 'translate-x-full', 'opacity-0');
          }, 100);
        }
        
        isNavCollapsed = false;
        isNavExpanded = true;
        
        // Auto-collapse after delay if still scrolled down
        setTimeout(() => {
          if (window.scrollY > 100 && !isNavCollapsed && isNavExpanded) {
            collapseNav();
            isNavExpanded = false;
          }
        }, 3000);
      }
    }
    
    // Function to reset the navbar when scrolling to top
    function resetNav() {
      if (window.scrollY <= 100) {
        // Show the main nav
        if (header) header.classList.remove('w-auto', 'right-4');
        if (navContainer) {
          navContainer.classList.remove('transform', 'translate-x-full', 'opacity-0');
        }
        
        // Hide the collapsed button
        if (collapsedNav) {
          collapsedNav.classList.remove('scale-100', 'opacity-100');
          collapsedNav.classList.add('scale-0', 'opacity-0');
        }
        
        isNavCollapsed = false;
        isNavExpanded = false;
      }
    }
    
    // Scroll event listener
    window.addEventListener('scroll', () => {
      // Get current scroll position
      const currentScrollY = window.scrollY;
      
      // If scrolling down and not already collapsed, collapse the nav
      if (currentScrollY > lastScrollY && currentScrollY > 100 && !isNavCollapsed) {
        collapseNav();
      } 
      // If at the top of the page, reset to normal
      else if (currentScrollY <= 100) {
        resetNav();
      }
      
      // Update last scroll position
      lastScrollY = currentScrollY;
    });
    
    // Click event for expanding the collapsed nav
    if (expandNav) {
      expandNav.addEventListener('click', expandNavbar);
    }
    
    if (collapsedNav) {
      collapsedNav.addEventListener('click', expandNavbar);
    }
    
    // Mobile menu toggle
    if (mobileMenuToggle && mobileMenu) {
      mobileMenuToggle.addEventListener('click', () => {
        mobileMenu.classList.toggle('hidden');
        
        // Add animation class
        if (!mobileMenu.classList.contains('hidden')) {
          mobileMenu.classList.add('animate-fadeIn');
          setTimeout(() => {
            mobileMenu.classList.remove('animate-fadeIn');
          }, 500);
        }
      });
    }
    
    // Close mobile menu when clicking outside
    document.addEventListener('click', (e) => {
      if (mobileMenu && !mobileMenu.classList.contains('hidden')) {
        if (e.target !== mobileMenu && 
            e.target !== mobileMenuToggle && 
            !mobileMenu.contains(e.target as Node) && 
            !mobileMenuToggle?.contains(e.target as Node)) {
          mobileMenu.classList.add('hidden');
        }
      }
    });
  
    // Update cart count from localStorage
    const updateCartCount = () => {
      const cartCountElement = document.getElementById('cart-count');
      if (cartCountElement) {
        try {
          const cartItems = JSON.parse(localStorage.getItem('cart') || '[]');
          cartCountElement.textContent = cartItems.length.toString();
        } catch (e) {
          console.error('Error parsing cart data:', e);
          cartCountElement.textContent = '0';
        }
      }
    };
    
    // Initial cart count update
    updateCartCount();
    
    // Listen for cart updates
    window.addEventListener('storage', (e) => {
      if (e.key === 'cart') {
        updateCartCount();
      }
    });
    
    // Also listen for custom cart update events
    window.addEventListener('cartUpdated', () => {
      updateCartCount();
    });

    // Search functionality
    function openSearch() {
      if (searchOverlay) {
        searchOverlay.classList.remove('opacity-0', 'pointer-events-none');
        searchContainer?.classList.remove('-translate-y-10');
        searchInput?.focus();
        document.body.style.overflow = 'hidden'; // Prevent scrolling when search is open
      }
    }

    // Function to close the search overlay
    function closeSearchOverlay() {
      if (searchOverlay) {
        searchOverlay.classList.add('opacity-0', 'pointer-events-none');
        searchContainer?.classList.add('-translate-y-10');
        document.body.style.overflow = ''; // Re-enable scrolling
      }
    }

    // Search toggle click handler
    if (searchToggle) {
      searchToggle.addEventListener('click', openSearch);
    }

    // Mobile search button click handler
    if (mobileSearchButton) {
      mobileSearchButton.addEventListener('click', () => {
        // Close mobile menu first
        if (mobileMenu) {
          mobileMenu.classList.add('hidden');
        }
        openSearch();
      });
    }

    // Close search button click handler
    if (closeSearch) {
      closeSearch.addEventListener('click', closeSearchOverlay);
    }

    // Close search when clicking outside the search container
    searchOverlay?.addEventListener('click', (e) => {
      if (e.target === searchOverlay) {
        closeSearchOverlay();
      }
    });

    // Close search on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && searchOverlay && !searchOverlay.classList.contains('opacity-0')) {
        closeSearchOverlay();
      }
    });

    // Search input handler
    if (searchInput) {
      searchInput.addEventListener('input', async (e) => {
        const query = (e.target as HTMLInputElement).value.trim();
        
        if (query.length < 2) {
          if (searchResults) {
            searchResults.innerHTML = `
              <div class="text-gray-500 text-center py-8">
                Enter at least 2 characters to search
              </div>
            `;
          }
          return;
        }
        
        try {
          // Show loading state
          if (searchResults) {
            searchResults.innerHTML = `
              <div class="text-gray-500 text-center py-8">
                <svg class="animate-spin h-6 w-6 mx-auto mb-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                  <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Searching...
              </div>
            `;
          }
          
          // Dynamically import the product utils
          const { getAllProducts } = await import('../../src/utils/productUtils');
          const allProducts = await getAllProducts();
          
          // Filter products by query (case insensitive)
          const lowerQuery = query.toLowerCase();
          const filteredProducts = allProducts.filter(product => 
            product.name.toLowerCase().includes(lowerQuery) || 
            product.description.toLowerCase().includes(lowerQuery) ||
            (product.category && product.category.toLowerCase().includes(lowerQuery))
          );
          
          // Display results
          if (searchResults) {
            if (filteredProducts.length === 0) {
              searchResults.innerHTML = `
                <div class="text-gray-500 text-center py-8">
                  No products found matching "${query}"
                </div>
              `;
            } else {
              searchResults.innerHTML = `
                <p class="text-sm text-gray-500 mb-4">Found ${filteredProducts.length} results for "${query}"</p>
                <div class="divide-y divide-gray-100">
                  ${filteredProducts.slice(0, 8).map(product => `
                    <a href="/products/${product.slug}" class="block py-3 px-2 hover:bg-gray-50 rounded-md transition">
                      <div class="flex items-center">
                        <div class="w-16 h-16 bg-gray-100 rounded-md flex-shrink-0 flex items-center justify-center overflow-hidden">
                          ${product.image 
                            ? `<img src="${product.image}" alt="${product.name}" class="max-h-full max-w-full object-contain" onerror="this.onerror=null; this.src='https://placehold.co/100x100/e2e8f0/1e293b?text=${encodeURIComponent(product.name.substring(0, 10))}'">`
                            : `<div class="text-xs text-center p-1 text-gray-600">${product.name.substring(0, 10)}...</div>`
                          }
                        </div>
                        <div class="ml-4 flex-grow">
                          <h4 class="font-medium text-gray-900">${product.name}</h4>
                          <p class="text-sm text-gray-500">${product.category || 'Research Product'}</p>
                        </div>
                        <div class="text-right">
                          <p class="font-bold text-primary-600">$${(product.salePrice || product.price).toFixed(2)}</p>
                          ${product.salePrice ? `<p class="text-xs text-gray-500 line-through">$${product.price.toFixed(2)}</p>` : ''}
                        </div>
                      </div>
                    </a>
                  `).join('')}
                </div>
                ${filteredProducts.length > 8 ? `
                  <div class="mt-4 text-center">
                    <a href="/products?search=${encodeURIComponent(query)}" class="text-primary-600 hover:text-primary-800 font-medium">View all ${filteredProducts.length} results</a>
                  </div>
                ` : ''}
              `;
            }
          }
        } catch (error) {
          console.error('Error searching products:', error);
          if (searchResults) {
            searchResults.innerHTML = `
              <div class="text-red-500 text-center py-8">
                Error searching products. Please try again.
              </div>
            `;
          }
        }
      });
    }
  });
</script>

<style>
  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  .animate-fadeIn {
    animation: fadeIn 0.3s ease-out forwards;
  }

  @keyframes pulseGlow {
    0%, 100% { box-shadow: 0 0 5px rgba(2, 132, 199, 0.5); }
    50% { box-shadow: 0 0 15px rgba(2, 132, 199, 0.8); }
  }

  #collapsed-nav {
    animation: pulseGlow 3s infinite;
  }
</style>